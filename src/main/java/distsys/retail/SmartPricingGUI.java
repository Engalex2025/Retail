/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package distsys.retail;

import generated.grpc.SmartPricing.PriceUpdateRequest;
import generated.grpc.SmartPricing.PriceUpdateResponse;
import generated.grpc.SmartPricing.SmartPricingGrpc;
import generated.grpc.SmartPricing.SmartPricingGrpc.SmartPricingBlockingStub;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import io.grpc.StatusRuntimeException;
import io.grpc.*;

/**
 *
 * @author Alexandre
 */
public class SmartPricingGUI extends javax.swing.JFrame { 
    private ManagedChannel channel;
    private static SmartPricingBlockingStub blockingStub;

    private Random random = new Random();
    private double currentPrice;
    public SmartPricingGUI() {
        initComponents();
        connectToServer();
    }
    private void connectToServer() {
    channel = ManagedChannelBuilder.forAddress("localhost", 50051)
            .usePlaintext()          
            .build();
  


    blockingStub = SmartPricingGrpc.newBlockingStub(channel);
}




                 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        productID = new javax.swing.JTextField();
        getPrice = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        productPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        updatePrice = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        priceUpdated = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Price Panel");

        jLabel2.setText("Product ID:");

        productID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productIDActionPerformed(evt);
            }
        });

        getPrice.setText("Get Price");
        getPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPriceActionPerformed(evt);
            }
        });

        jLabel3.setText("Price :");

        jLabel4.setText("Update Price Panel");

        updatePrice.setText("Update Price");
        updatePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePriceActionPerformed(evt);
            }
        });

        jLabel5.setText("Price Updated:");

        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(priceUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(updatePrice)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 169, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(170, 170, 170))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(getPrice)
                        .addGap(209, 209, 209))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(222, 222, 222))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(getPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updatePrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(priceUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productIDActionPerformed
                                         
    String id = productID.getText().trim();

    if (id.isEmpty()) {
        outputArea.append("️ Product ID field is empty. Please enter a valid ID.\n");
        return;
    }

    // Validating that ID starts with 'R' with until 4 digits followed
    if (!id.matches("R\\d{1,4}")) {
        outputArea.append("Invalid Product ID. It starts with 'R' followed by up to 4 digits.\n");
        return;
    }

    outputArea.append("Product ID added: " + id + "\n");

    }//GEN-LAST:event_productIDActionPerformed

    private void getPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPriceActionPerformed
                                                                                                                     
    String id = productID.getText().trim();

    if (id.isEmpty()) {
        outputArea.append("Please enter a product ID.\n");
        return;
    }

    // Validate that the ID starts with 'R' followed by up to 4 digits
    if (!id.matches("R\\d{1,4}")) {
        outputArea.append("Invalid Product ID. It should start with 'R' followed by up to 4 digits.\n");
        return;
    }

    // Generate random price between 10.00 and 100.00
    currentPrice = 10.0 + (90.0 * random.nextDouble());

    productPrice.setText(String.format("%.2f", currentPrice));

    // Clearing the 'priceUpdated' field when a new price is added
    priceUpdated.setText("");

    outputArea.append("Product ID Price " + id + ": €" 
                      + String.format("%.2f", currentPrice) + "\n");



    }//GEN-LAST:event_getPriceActionPerformed

    private void updatePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePriceActionPerformed
                                           

    String id = productID.getText().trim();

    if (id.isEmpty()) {
        outputArea.append("Please enter a product ID.\n");
        return;
    }

    // Get current price from field
    String priceText = productPrice.getText().trim();
    if (priceText.isEmpty()) {
        outputArea.append("Please generate a base price first.\n");
        return;
    }

    try {
        currentPrice = Double.parseDouble(priceText);
    } catch (NumberFormatException e) {
        outputArea.append("Invalid base price format.\n");
        return;
    }

    // Applying Price Updates
    int adjustmentType = random.nextInt(4);
    double adjustedPrice = currentPrice;
    String adjustmentDescription = "";

    switch (adjustmentType) {
        case 0:
            adjustedPrice = currentPrice * 0.90;
            adjustmentDescription = "10% discount";
            break;
        case 1:
            adjustedPrice = currentPrice * 0.80;
            adjustmentDescription = "20% discount";
            break;
        case 2:
            adjustedPrice = currentPrice * 1.10;
            adjustmentDescription = "10% increase";
            break;
        case 3:
            adjustedPrice = currentPrice * 1.20;
            adjustmentDescription = "20% increase";
            break;
    }

    priceUpdated.setText(String.format("%.2f", adjustedPrice));

    // Append result to outputArea with the description of the adjustment
    String result = "Product ID: " + id + 
                    "\nBase Price: €" + String.format("%.2f", currentPrice) +
                    "\nAdjusted Price: €" + String.format("%.2f", adjustedPrice) +
                    " (" + adjustmentDescription + ")\n\n";

    outputArea.append(result);

    // Call gRPC to update the price on the server
    PriceUpdateRequest request = PriceUpdateRequest.newBuilder()
            .setProductId(id)
            .setNewPrice(adjustedPrice)
            .build();
    
    try {
    // Add a 3-second timeout for the gRPC call
    PriceUpdateResponse response = blockingStub
            .withDeadlineAfter(3, TimeUnit.SECONDS)
            .updatePrice(request);

    if (response.getSuccess()) {
        outputArea.append("Price update was successful!\n");
    } else {
        outputArea.append("Price update failed.\n");
    }
} catch (StatusRuntimeException e) {
    // Handle timeout, cancellation, or connectivity issues
    outputArea.append("Error: gRPC request failed - " + e.getStatus().getDescription() + "\n");
}




    }//GEN-LAST:event_updatePriceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartPricingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartPricingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartPricingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartPricingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmartPricingGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getPrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JTextField priceUpdated;
    private javax.swing.JTextField productID;
    private javax.swing.JTextField productPrice;
    private javax.swing.JButton updatePrice;
    // End of variables declaration//GEN-END:variables
        }
                
