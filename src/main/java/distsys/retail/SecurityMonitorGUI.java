/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package distsys.retail;

import generated.grpc.SecurityMonitor.Empty;
import generated.grpc.SecurityMonitor.SecurityAlert;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import java.util.logging.Logger;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import generated.grpc.SecurityMonitor.SecurityIncident;
import generated.grpc.SecurityMonitor.SecurityResponse;
import generated.grpc.SecurityMonitor.StoreSecurityGrpc;
import generated.grpc.SecurityMonitor.StoreSecurityGrpc.StoreSecurityStub;
import io.grpc.CallOptions;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author alexa
 */
public class SecurityMonitorGUI extends javax.swing.JFrame {
     private static final Logger logger = Logger.getLogger(SecurityMonitorGUI.class.getName());
     private static StoreSecurityStub asyncStub;
     
     
    private ManagedChannel channel;
    private StreamObserver<SecurityIncident> incidentObserver;  // For sending incidents (Bidirectional)
    private StreamObserver<SecurityAlert> alertObserver;
    private boolean monitoring = false; 

    /**
     * Creates new form SecurityMonitorGUI
     */
    public SecurityMonitorGUI() {
    initComponents();
    
    // Set up gRPC channel and stub
    channel = ManagedChannelBuilder
    .forAddress("localhost", 50051)
    .usePlaintext()
    .build();
    asyncStub = StoreSecurityGrpc.newStub(channel);
}

    // Util to format timestamp
    private String getCurrentTimestamp() {
        return LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        alertsArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        incidentIDField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        actionBox = new javax.swing.JComboBox<>();
        sendActionButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        responseArea = new javax.swing.JTextArea();
        startMonitoring = new javax.swing.JButton();
        stopMonitoring = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Security Alerts");

        alertsArea.setEditable(false);
        alertsArea.setColumns(20);
        alertsArea.setLineWrap(true);
        alertsArea.setRows(5);
        alertsArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(alertsArea);

        jLabel2.setText("Incident ID:");

        incidentIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incidentIDFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Action");

        actionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Investigate", "Robbery Alert", "Call Police", "Other" }));
        actionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionBoxActionPerformed(evt);
            }
        });

        sendActionButton.setText("Send");
        sendActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("System Response");

        responseArea.setColumns(20);
        responseArea.setRows(5);
        jScrollPane2.setViewportView(responseArea);

        startMonitoring.setText("startMonitoring");
        startMonitoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMonitoringActionPerformed(evt);
            }
        });

        stopMonitoring.setText("stopMonitoring");
        stopMonitoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopMonitoringActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sendActionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(1, 1, 1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(incidentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(startMonitoring)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stopMonitoring)
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(incidentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(actionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sendActionButton)
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startMonitoring)
                    .addComponent(stopMonitoring))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void incidentIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incidentIDFieldActionPerformed

    if (!incidentIDField.getText().trim().isEmpty()) {
        sendActionButton.doClick();
    } else {
        responseArea.append("Please enter a valid Incident ID.\n");
    }


   

    }//GEN-LAST:event_incidentIDFieldActionPerformed

    private void actionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionBoxActionPerformed
                                 
    String selectedAction = (String) actionBox.getSelectedItem();  // Get the selected item from the combo box
    
    // Display the selected action in the alerts area (alertsArea)
    alertsArea.append("Selected Action: " + selectedAction + "\n");

    // From here, you can process the action. For example:
    if (selectedAction.equals("Investigate")) {
        // You can send an investigation request (e.g., call a gRPC service)
        responseArea.append("Investigation initiated.\n");
    } else if (selectedAction.equals("Disarm")) {
        // You could call a function to disarm the alarm or perform any other logic
        responseArea.append("Alarm disarmed.\n");
    } else if (selectedAction.equals("Robbery Alert")) {
        // You could trigger a robbery alert (e.g., notify the police)
        responseArea.append("Robbery alert triggered.\n");
    } else {
        // If the user selects "Other" or any other custom action
        responseArea.append("Custom action selected.\n");
    }


    }//GEN-LAST:event_actionBoxActionPerformed

    private void sendActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionButtonActionPerformed

    String incidentID = incidentIDField.getText().trim();
    if (!incidentID.matches("R\\d{3}")) {
    responseArea.append("Invalid Incident ID. Use format: R followed by 3 digits (e.g., R123).\n");
    return;
}
    String selectedAction = (String) actionBox.getSelectedItem();


    // Validation
    if (incidentID.isEmpty() || selectedAction == null || selectedAction.isEmpty()) {
        responseArea.append("Incident ID and Action must be filled.\n");
        return;
    }

    // Initialize bidirectional streaming if not yet started
    if (incidentObserver == null) {
        incidentObserver = asyncStub.handleSecurityIncident(new StreamObserver<SecurityResponse>() {
            @Override
            public void onNext(SecurityResponse response) {
                String message = "Incident " + response.getIncidentId() + ": " + response.getResponseStatus() + "\n";
                responseArea.append(message);
            }

            @Override
            public void onError(Throwable t) {
                responseArea.append("Error during incident communication: " + t.getMessage() + "\n");
            }

            @Override
            public void onCompleted() {
                responseArea.append("Incident stream closed by server.\n");
            }
        });
    }

    // Send the incident to the server
    SecurityIncident incident = SecurityIncident.newBuilder()
        .setIncidentId(incidentID)
        .setActionTaken(selectedAction)
        .build();

// Definir um deadline para o envio do incidente (timeout de 5 segundos)
asyncStub.withDeadlineAfter(5, TimeUnit.SECONDS).handleSecurityIncident(new StreamObserver<SecurityResponse>() {
    @Override
    public void onNext(SecurityResponse response) {
        String message = "Incident " + response.getIncidentId() + ": " + response.getResponseStatus() + "\n";
        responseArea.append(message);
    }

    @Override
    public void onError(Throwable t) {
        responseArea.append("Error during incident communication: " + t.getMessage() + "\n");
    }

    @Override
    public void onCompleted() {
        responseArea.append("Incident stream closed by server.\n");
    }
}).onNext(incident);


    }//GEN-LAST:event_sendActionButtonActionPerformed

    private void startMonitoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonitoringActionPerformed
                                      
    if (monitoring) {
        alertsArea.append("Monitoring is already active.\n");
        return;
    }

    monitoring = true;
    alertsArea.append("Monitoring started...\n");

    alertObserver = new StreamObserver<SecurityAlert>() {
        @Override
        public void onNext(SecurityAlert alert) {
            alertsArea.append("ALERT: " + alert.getAlertMessage() + "\n");
        }

        @Override
        public void onError(Throwable t) {
            alertsArea.append("Error: " + t.getMessage() + "\n");
            monitoring = false;
        }

        @Override
        public void onCompleted() {
            alertsArea.append("Monitoring completed.\n");
            monitoring = false;
        }
    };

    asyncStub.streamSecurityAlerts(Empty.newBuilder().build(), alertObserver);



    }//GEN-LAST:event_startMonitoringActionPerformed

    private void stopMonitoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopMonitoringActionPerformed

    if (!monitoring) {
        alertsArea.append("Monitoring is not active.\n");
        return;
    }

    monitoring = false;

    if (alertObserver != null) {
        alertObserver.onCompleted();  // Finaliza a stream
        alertsArea.append("Monitoring stopped by user.\n");
    } else {
        alertsArea.append("No active stream to stop.\n");
    }
    
    // Cancelamento explícito (opcional)
    if (channel != null) {
        channel.shutdownNow();  // Cancela todas as chamadas em andamento e fecha o canal
        alertsArea.append("Channel shutdown initiated.\n");
    }



    }//GEN-LAST:event_stopMonitoringActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecurityMonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecurityMonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecurityMonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecurityMonitorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecurityMonitorGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> actionBox;
    private javax.swing.JTextArea alertsArea;
    private javax.swing.JTextField incidentIDField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea responseArea;
    private javax.swing.JButton sendActionButton;
    private javax.swing.JButton startMonitoring;
    private javax.swing.JButton stopMonitoring;
    // End of variables declaration//GEN-END:variables
}
